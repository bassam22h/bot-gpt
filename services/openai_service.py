import re
import logging
from openai import OpenAI
from config import OPENROUTER_API_KEY

# ุฅุนุฏุงุฏ ูุธุงู ุชุณุฌูู ุงูุฃุฎุทุงุก
logging.basicConfig(
    filename='bot_errors.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

def clean_text(text):
    """
    ุชูุธูู ุงููุต ูู ุฃู ุฃุญุฑู ุบูุฑ ูุฑุบูุจ ูููุง ูุน ุงูุญูุงุธ ุนูู:
    - ุงูุฃุญุฑู ุงูุนุฑุจูุฉ
    - ุงูุฃุฑูุงู
    - ุนูุงูุงุช ุงูุชุฑููู ุงูุนุฑุจูุฉ
    - ุงูุฅูููุฌู ุงููุณููุญ ุจูุง
    """
    arabic_pattern = r'[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]'
    allowed_symbols = r'[#_ุุ:ุ!ู.ุ \n]'
    emojis = r'[โ๐ฑ๐บโจ๐พ๐ช๐ช๐พ๐๐ก๐ค]'
    
    clean = re.sub(
        fr'[^{arabic_pattern}{allowed_symbols}{emojis}0-9]', 
        '', 
        text
    )
    
    # ุชุญุณูู ุงููุณุงูุงุช ูุงูููุงุตู
    clean = re.sub(r'[\s\n]+', '\n', clean).strip()
    clean = re.sub(r'[ุ]+', 'ุ', clean)
    clean = re.sub(r'[.]+', '.', clean)
    
    return clean

def quality_check(text):
    """
    ุงูุชุญูู ูู ุฌูุฏุฉ ุงููุต ุงููุงุชุฌ:
    - ูุฌูุฏ ุญุฏ ุฃุฏูู ูู ุงูุฃุญุฑู ุงูุนุฑุจูุฉ
    - ุงููููู ุงูุฃุณุงุณู ููููุดูุฑ
    """
    # ุงูุชุญูู ูู ูุฌูุฏ ูุญุชูู ุนุฑุจู ูุงูู
    arabic_chars = re.findall(r'[\u0600-\u06FF]', text)
    if len(arabic_chars) < 20:
        return False
        
    # ุงูุชุญูู ูู ุงููููู ุงูุฃุณุงุณู (ููุฏูุฉุ ููุงุทุ ุฎุงุชูุฉ)
    if not re.search(r'^.*\n.*\n- .*\n- .*\n- .*\n.*$', text):
        return False
        
    return True

async def generate_post(user_input, platform):
    """
    ุฅูุดุงุก ููุดูุฑ ุงุญุชุฑุงูู ุญุณุจ ุงูููุตุฉ ุงููุญุฏุฏุฉ
    """
    platform_rules = {
        "ุชููุชุฑ": {
            "length": "180-280 ุญุฑูุงู",
            "hashtags": "2-3 ูุงุดุชุงูุงุช",
            "max_tokens": 300
        },
        "ููููุฏุฅู": {
            "length": "300-600 ุญุฑูุงู",
            "hashtags": "3-5 ูุงุดุชุงูุงุช",
            "max_tokens": 500
        },
        "ุฅูุณุชุบุฑุงู": {
            "length": "220-400 ุญุฑูุงู",
            "hashtags": "4-5 ูุงุดุชุงูุงุช",
            "max_tokens": 400
        },
    }

    system_prompt = (
        f"ุฃูุช ูุงุชุจ ูุญุชูู ูุญุชุฑู ููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู ููุท. ุงูุชุจ ููุดูุฑุงู ูู {platform} ููู ุงูุดุฑูุท ุงูุชุงููุฉ:\n"
        f"1. ุงููุบุฉ: ุงูุนุฑุจูุฉ ุงููุตุญู ููุท (ููููุน ุงุณุชุฎุฏุงู ุฃู ูุบุฉ ุฃุฎุฑู)\n"
        f"2. ุงูุทูู: {platform_rules[platform]['length']}\n"
        f"3. ุงููููู:\n"
        f"   - ููุฏูุฉ ุฌุฐุงุจุฉ (ุณุทุฑุงู)\n"
        f"   - 3 ููุงุท ุฑุฆูุณูุฉ (ูู ููุทุฉ ูู ุณุทุฑ ูููุตู)\n"
        f"   - ุฎุงุชูุฉ ุชุญููุฒูุฉ (ุณุทุฑ)\n"
        f"4. ุงูุฅูููุฌู: ุงุณุชุฎุฏู 2-3 ุฅูููุฌู ููุงุณุจุฉ ูููุญุชูู\n"
        f"5. ุงููุงุดุชุงูุงุช: {platform_rules[platform]['hashtags']} ุฐุงุช ุตูุฉ (ูู ุขุฎุฑ ุงูููุดูุฑ)\n"
        f"6. ุงูููููุนุงุช:\n"
        f"   - ุฃู ูููุงุช ุบูุฑ ุนุฑุจูุฉ\n"
        f"   - ุฑููุฒ ุฃู ุฃุญุฑู ุบูุฑ ูุนุชูุฏุฉ\n"
        f"   - ุฌูู ุบูุฑ ููุชููุฉ\n"
        "\nูุซุงู ูููุดูุฑ ุฌูุฏ:\n"
        "ูุฑุญุจุงู ุจูู ูู ุนุงูู ุงูุชุณููู ุงูุฑููู! ๐\n"
        "- ุงุณุชุฑุงุชูุฌูุงุช ูุจุชูุฑุฉ ูุฒูุงุฏุฉ ุงููุจูุนุงุช\n"
        "- ุชุญููู ุงูุจูุงูุงุช ูููู ุงูุนููุงุก\n"
        "- ุญููู ุชุณููููุฉ ูุฎุตุตุฉ ูุงุญุชูุงุฌุงุชู\n"
        "ููุงุณุชูุณุงุฑ ุนู ุฎุฏูุงุชูุงุ ุชูุงุตููุง ูุนูุง ุงูููู! #ุชุณููู_ุฑููู #ุฒูุงุฏุฉ_ูุจูุนุงุช\n"
        "\nุงููุญุชูู ุงููุทููุจ:\n"
    )

    try:
        response = client.chat.completions.create(
            model="deepseek/deepseek-v3-base:free",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ],
            temperature=0.5,
            max_tokens=platform_rules[platform]['max_tokens'],
            stop=["###"]
        )
        result = response.choices[0].message.content
        
        # ุงูุชุญูู ูู ุงูุฌูุฏุฉ ูุฅุนุงุฏุฉ ุงููุญุงููุฉ ุฅุฐุง ูุฒู ุงูุฃูุฑ
        if not quality_check(result):
            logging.warning("ุฌูุฏุฉ ุงููุต ุบูุฑ ูุงููุฉุ ุฅุนุงุฏุฉ ุงููุญุงููุฉ...")
            return await generate_post(user_input, platform)
            
        cleaned_result = clean_text(result)
        
        # ุชุณุฌูู ุงููุฌุงุญ ูู ุงูุณุฌู
        logging.info(f"ุชู ุฅูุดุงุก ููุดูุฑ ุจูุฌุงุญ ูู {platform}")
        return cleaned_result
        
    except Exception as e:
        logging.error(f"OpenAI Error: {e}")
        return "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูููุดูุฑ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู."
